// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: transmitter.proto

package transmitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Transmitter_TransmitFrequencies_FullMethodName = "/transmitter.Transmitter/TransmitFrequencies"
)

// TransmitterClient is the client API for Transmitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitterClient interface {
	TransmitFrequencies(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (Transmitter_TransmitFrequenciesClient, error)
}

type transmitterClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitterClient(cc grpc.ClientConnInterface) TransmitterClient {
	return &transmitterClient{cc}
}

func (c *transmitterClient) TransmitFrequencies(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (Transmitter_TransmitFrequenciesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transmitter_ServiceDesc.Streams[0], Transmitter_TransmitFrequencies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &transmitterTransmitFrequenciesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transmitter_TransmitFrequenciesClient interface {
	Recv() (*FrequencyResponse, error)
	grpc.ClientStream
}

type transmitterTransmitFrequenciesClient struct {
	grpc.ClientStream
}

func (x *transmitterTransmitFrequenciesClient) Recv() (*FrequencyResponse, error) {
	m := new(FrequencyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmitterServer is the server API for Transmitter service.
// All implementations must embed UnimplementedTransmitterServer
// for forward compatibility
type TransmitterServer interface {
	TransmitFrequencies(*FrequencyRequest, Transmitter_TransmitFrequenciesServer) error
	mustEmbedUnimplementedTransmitterServer()
}

// UnimplementedTransmitterServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitterServer struct {
}

func (UnimplementedTransmitterServer) TransmitFrequencies(*FrequencyRequest, Transmitter_TransmitFrequenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method TransmitFrequencies not implemented")
}
func (UnimplementedTransmitterServer) mustEmbedUnimplementedTransmitterServer() {}

// UnsafeTransmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitterServer will
// result in compilation errors.
type UnsafeTransmitterServer interface {
	mustEmbedUnimplementedTransmitterServer()
}

func RegisterTransmitterServer(s grpc.ServiceRegistrar, srv TransmitterServer) {
	s.RegisterService(&Transmitter_ServiceDesc, srv)
}

func _Transmitter_TransmitFrequencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FrequencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmitterServer).TransmitFrequencies(m, &transmitterTransmitFrequenciesServer{ServerStream: stream})
}

type Transmitter_TransmitFrequenciesServer interface {
	Send(*FrequencyResponse) error
	grpc.ServerStream
}

type transmitterTransmitFrequenciesServer struct {
	grpc.ServerStream
}

func (x *transmitterTransmitFrequenciesServer) Send(m *FrequencyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Transmitter_ServiceDesc is the grpc.ServiceDesc for Transmitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transmitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transmitter.Transmitter",
	HandlerType: (*TransmitterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransmitFrequencies",
			Handler:       _Transmitter_TransmitFrequencies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transmitter.proto",
}
